# -*- coding: utf-8 -*-
"""feature model logic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/156N0mNtzW4Wt1KXV06PGodCUkWBp7BW_
"""

# src/model_selection.py

from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, IsolationForest
from sklearn.svm import SVC, SVR
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn.decomposition import PCA
from sklearn.neighbors import LocalOutlierFactor

def get_models(task_type: str):

    if task_type == "classification":
        models = {
            "LogisticRegression": LogisticRegression(max_iter=1000),
            "RandomForestClassifier": RandomForestClassifier(random_state=42),
            "SVC": SVC(probability=True)
        }

    elif task_type == "regression":
        models = {
            "LinearRegression": LinearRegression(),
            "RandomForestRegressor": RandomForestRegressor(random_state=42),
            "SVR": SVR()
        }

    elif task_type == "clustering":
        models = {
            "KMeans": KMeans(n_clusters=3, random_state=42),
            "AgglomerativeClustering": AgglomerativeClustering(n_clusters=3),
            "DBSCAN": DBSCAN(eps=0.5, min_samples=5)
        }

    elif task_type == "anomaly_detection":
        models = {
            "IsolationForest": IsolationForest(contamination=0.05, random_state=42),
            "LocalOutlierFactor": LocalOutlierFactor(n_neighbors=20, contamination=0.05)
        }

    elif task_type == "dim_reduction":
        models = {
            "PCA": PCA(n_components=2)  # reduce to 2D for visualization
        }

    else:
        raise ValueError(f"Unsupported task_type: {task_type}")

    return models

